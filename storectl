#!/bin/bash

function echo_r() {
    echo -e "\e[1;31m$1\e[0m"
}
function echo_g() {
    echo -e "\e[1;32m$1\e[0m"
}
function echo_y() {
    echo -e "\e[1;33m$1\e[0m"
}
function echo_b() {
    echo -e "\e[1;34m$1\e[0m"
}
function echo_m() {
    echo -e "\e[1;35m$1\e[0m"
}
function echo_c() {
    echo -e "\e[1;36m$1\e[0m"
}
function echo_g1() {
    echo -e "\e[1;37m$1\e[0m"
}
function echo_g0() {
    echo -e "\e[1;30m$1\e[0m"
}

Project="$PWD/Cloud.sln"
Generator="$PWD/Source/Cloud.Generator/Cloud.Generator.csproj"
Publish="$HOME/Public/"
Binary="$HOME/Public/BookStore.Store"
SEP="==========================================================="

export SolutionDir="$PWD/"

function log_env  {
    echo_r  "storectl build tool."
    echo    ""
    echo_g1 "  Environment variables:"
    echo    "    \$Project     = $Project"
    echo    "    \$Publish     = $Publish"
    echo    "    \$SolutionDir = $SolutionDir"
    echo    "    \$AutoTest    = $AutoTest"
}

function usage {
    echo_g0 $SEP
    log_env
    echo  ""
    echo_g1 "Usage: ./storectl <opts>"
    echo  ""
    echo  "  Where <opts> is one of the following:"
    echo_g1 "    build, run, rebuild, clean, help"
    echo  ""
    echo_g0 $SEP
}

function  runStore {
    if [ "$1" = "--development" ]; then
        echo_g "Development....."
        $Binary --development --cfg $SolutionDir/BuildTools/runConfig.json
    elif [ "$1" = "--cfg" ]; then
        $Binary --cfg $2
    else
        $Binary --cfg $SolutionDir/BuildTools/runConfig.json
    fi
}

function  buildStore {

    dotnet restore $Project
    echo_g0 $SEP
    echo "Building Generator"
    dotnet build $Generator -c Release
    echo_g0 $SEP
    echo "Building Solution"
    dotnet build $Project -c Release
    echo_g0 $SEP
    echo "Publishing Solution"
    dotnet publish $Project -c Release --no-build -o $Publish
    echo_g0 $SEP
}

function  clean {
    git clean -dfx $SolutionDir
}

if [ "$1" = "help" ]; then
    usage

elif [ "$1" = "run" ]; then

    runStore $2 $3

elif [ "$1" = "clean" ]; then

    clean

elif [ "$1" = "rebuild" ]; then
    clean

    buildStore

    if [ "$2" = "run" ]; then
        runStore $3
    fi

elif [ "$1" = "build" ]; then

    buildStore

    if [ "$2" = "run" ]; then
        runStore $3
    fi

else
    usage
fi
