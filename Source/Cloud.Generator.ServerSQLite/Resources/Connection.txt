    public static class Database 
    {
        private static string _databaseFile;

        public static string Path => _databaseFile;

        /// 
        /// 
        public static void Register(string pathToDatabaseFile) 
        {
            if (string.IsNullOrEmpty(pathToDatabaseFile))
                throw new ArgumentNullException(nameof(pathToDatabaseFile));

            LogUtils.Log(pathToDatabaseFile);

            _databaseFile = pathToDatabaseFile;

            try 
            {
                ${RegisterTypes}
            } 
            catch (Exception ex) 
            {
                _databaseFile = null;
                LogUtils.Log(LogLevel.Error, ex.Message);
            }
        }

        public static void Clear() 
        {
            ${ClearTypes}
        }

        public static string GenerateKey() 
        {
            return Guid.NewGuid()
                .ToString()
                .ToUpper(CultureInfo.InvariantCulture);
        }
    }

    public class Connection : IDisposable
    {
        public SQLiteConnection DB => _connection;

        private readonly SQLiteConnection _connection;

        public Connection(SQLiteOpenFlags flags = SQLiteOpenFlags.ReadWrite)
        {
            try
            {
                _connection = new SQLiteConnection(Database.Path, flags);
            }
            catch
            {
                LogUtils.Log($"Failed to open the supplied {Database.Path}");
            }
        }

        public void Dispose()
        {
            _connection?.Close();
            _connection?.Dispose();
        }
    }

    public class UnpackedBundle 
    {
        public int    ServerId { get; set; }
        public int    Revision { get; set; }
        public int    TableId  { get; set; }
        public int    UserId   { get; set; }
        public string Key      { get; set; }
        public string Package  { get; set; }
    }
    
    public class RevisionId 
    {
        public int    ServerId { get; set; }
        public int    Revision { get; set; }
    }
    
    ${Content}

    
    /// <summary>
    /// Controller that is used to execute a client status check.
    /// </summary>
    public class StatusController : Controller 
    {
        [Route("${Status}")][HttpGet]
        public void StatusCheck()
        {
            LogUtils.Log(LogLevel.Info, "status check");
        }
    }
