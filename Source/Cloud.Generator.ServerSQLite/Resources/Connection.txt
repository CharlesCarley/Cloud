    /// <summary>
    /// Class for creating, connecting, and maintaining a static SQLiteConnection pointer.
    /// </summary>
    public static class Database {

        private static string _databaseFile;

        /// <summary>
        /// Opens or creates a database at the supplied path.
        /// </summary>
        /// <param name="pathToDatabaseFile">A file system path to the database.</param>
        /// <remarks>
        /// If an ILog implementation is not supplied prior to invoking this method, then
        /// a default log is created, which logs through System.Console.
        /// </remarks>
        public static void Register(string pathToDatabaseFile) 
        {
            if (string.IsNullOrEmpty(pathToDatabaseFile))
                throw new ArgumentNullException(nameof(pathToDatabaseFile));

            _databaseFile = null;

            try {
                Connection = new SQLiteConnection(pathToDatabaseFile,
                                           SQLiteOpenFlags.ReadWrite | SQLiteOpenFlags.Create);
                ${RegisterTypes}

                _databaseFile = pathToDatabaseFile;

            } catch (Exception ex) {

                LogUtils.Log(LogLevel.Error, ex.Message);
            }
            Close();
        }

        public static void Connect()  
        {

            if (string.IsNullOrEmpty(_databaseFile)) {   

                LogUtils.Log(LogLevel.Error, 
                    nameof(Connect),
                    "Invalid path to the database.");

                return;
            }

            try {
                Connection = new SQLiteConnection(
                    _databaseFile, 
                    SQLiteOpenFlags.ReadWrite | SQLiteOpenFlags.Create);

            } catch (Exception ex) {
                LogUtils.Log(LogLevel.Error, ex.Message);
                Close();
            }
        }

        public static bool IsConnected => Connection != null;

        public static void Clear() {
            ${ClearTypes}
        }

        /// <summary>
        /// Closes any open database handles and sets the local
        /// connection to null.
        /// </summary>
        public static void Close() 
        {
            Connection?.Close();
            Connection?.Dispose();
            Connection = null;
        }

        public static string GenerateKey() 
        {
            return Guid.NewGuid()
                .ToString()
                .ToUpper(CultureInfo.InvariantCulture);
        }

        /// <summary>
        /// Provides read only access to the open SQLiteConnection handle.
        /// </summary>
        public static SQLiteConnection Connection { get; private set; }
    }

    public class UnpackedBundle {
        public int    ServerId { get; set; }
        public int    Revision { get; set; }
        public int    TableId  { get; set; }
        public int    UserId   { get; set; }
        public string Key      { get; set; }
        public string Package  { get; set; }
    }
    
    public class RevisionId {
        public int    ServerId { get; set; }
        public int    Revision { get; set; }
    }
    
    ${Content}

    /// <summary>
    /// Controller that is used to execute a client status check.
    /// </summary>
    public class StatusController : Controller {
        [Route("${Status}")][HttpGet]
        public void StatusCheck()
        {
            LogUtils.Log(LogLevel.Info, "status check");
        }
    }
