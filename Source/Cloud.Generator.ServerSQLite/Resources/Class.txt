    
    public class ${ClassName} 
    {
        [PrimaryKey, AutoIncrement]
        public int ServerId { get; set; } = Constants.Undefined;

        public int Revision { get; set; } = Constants.Undefined;

        public string  Key { get; set; } = string.Empty;

        public string  Storage  { get; set; } = string.Empty;

        public static void Clear() 
        {
            using var con = new Connection(SQLiteOpenFlags.ReadWrite | SQLiteOpenFlags.Create);
            con.DB?.DropTable<${ClassName}>();
            con.DB?.CreateTable<${ClassName}>();
        }

        public static void Register() 
        {
            using var con = new Connection(SQLiteOpenFlags.ReadWrite | SQLiteOpenFlags.Create);
            con.DB?.CreateTable<${ClassName}>();
        }

        private static RevisionId InsertImpl(Connection con, TableQuery<${ClassName}> query, ${ClassName} obj)
        {
            if (string.IsNullOrEmpty(obj.Key))
                throw new Exception("The supplied object's key is undefined");

            obj.Revision = 1;

            RevisionId revision = null;
            if (con.DB.Insert(obj) != 0)
            {
                ${ClassName} element = query.FirstOrDefault(i => i.Key == obj.Key);
                if (element.ServerId != Constants.Undefined)
                {
                    revision = new RevisionId {
                        Revision = 1,
                        ServerId = Constants.Undefined
                    };
                }
                else
                    throw new Exception("Failed to extract an id from the database.");
            }
            else
                throw new Exception($"Insert object {obj.Key} failed.");
            return revision;
        }

        private static RevisionId UpdateImpl(Connection con, TableQuery<${ClassName}> query, ${ClassName} obj)
        {
            ${ClassName} element = query.FirstOrDefault(i => i.Key == obj.Key);
            if (element == null)
                throw new Exception($"Failed to extract the object {obj.Key} from the database.");

            RevisionId revision = null;

            if (element.ServerId != Constants.Undefined)
            {
                // Update the identifier for this instance and
                // bump the revision prior to update.

                obj.ServerId = element.ServerId;
                obj.Revision = element.Revision + 1;

                if (con.DB.Update(obj) != 0)
                {
                    revision = new RevisionId {
                        Revision = obj.Revision,
                        ServerId = element.ServerId
                    };
                }
                else
                    throw new Exception($"Failed update the {obj.Key} element in the database.");
            }
            else
                throw new Exception("Failed to extract an id from the database.");

            return revision;
        }

        public static bool Save(${ClassName} obj)
        {
            if (obj is null)
                return false;

            RevisionId result = null;
            try
            {
                using var con = new Connection();
                var query = con.DB?.Table<${ClassName}>();

                if (query != null)
                {
                    if (query.All(i => i.Key != obj.Key))
                        result = InsertImpl(con, query, obj);
                    else
                        result = UpdateImpl(con, query, obj);
                }
            }
            catch (Exception ex)
            {
                LogUtils.Log(LogLevel.Error, nameof(Save), ex.Message);
            }
            return result != null;
        }

        public static string AsJson64(${ClassName} obj) 
        {
            if (obj is null)
                return string.Empty;

            var json = new JsonObject();
            json.AddValue("ServerId", obj.ServerId);
            json.AddValue("Revision", obj.Revision);
            json.AddValue("Package",  obj.Storage);
            return json.AsBase64();
        }
    }

    public class ${ClassName}Controller : Controller 
    {
        private string ValidateBundle(PostBundle bundle)
        {
            if (bundle is null) 
            {
                LogUtils.Log(LogLevel.Warn, nameof(ValidateBundle), "The supplied bundle is null.");
                return null;
            }
            
            if (string.IsNullOrEmpty(bundle.Content)) 
            {
                LogUtils.Log(LogLevel.Warn, nameof(ValidateBundle), "The bundle is missing content.");
                return null;
            }

            var result = StringUtils.FromBase64(bundle.Content);
            if (string.IsNullOrEmpty(result))
            {               
                LogUtils.Log(LogLevel.Warn, nameof(ValidateBundle), "The bundle failed to unpack.");
                return null;
            }
            return result;
        }

        [Route("${SelectArray}/${UniqueId}")] 
        [HttpGet]
        public string SelectArray() 
        {
            using var con = new Connection();
            if (con.DB is null) 
            {
                LogUtils.Log(LogLevel.Warn, nameof(SelectArray),  "No connection to the database.");
                return Constants.ReturnNone;
            }

            string returnString;
            try 
            {
                var result = con.DB.Query<RevisionId>("SELECT ServerId, Revision FROM ${ClassName};");
                if (result != null && result.Count > 0) 
                {
                    var list = new List<int>();
                    foreach (var item in result)
                    {
                        list.Add(item.ServerId);
                        list.Add(item.Revision);
                    }
                    returnString = StringUtils.IntListToString(list, true);
                }
                else 
                    returnString = Constants.ReturnNone;
            }
            catch (Exception ex)
            {
                LogUtils.Log(LogLevel.Error, nameof(SelectArray), ex.Message);
                returnString = Constants.ReturnNone;
            }
            return returnString;
        }

        [Route("${ContainsKey}/${UniqueId}")] 
        [HttpPost]
        public string ContainsKey([FromBody] PostBundle bundle) 
        {
            var lookupKey = ValidateBundle(bundle);
            if (string.IsNullOrEmpty(lookupKey))  
            {
                LogUtils.Log(LogLevel.Error, 
                    nameof(ContainsKey), 
                    "Failed to extract bundle content.");

                return Constants.ReturnFailure;
            }

            string result;
            try 
            {
                using var con = new Connection();
                if (con.DB != null) 
                {
                    var query = con.DB.Table<${ClassName}>();
                    if (query != null)
                    {
                        var item = query.FirstOrDefault(obj => obj.Key == lookupKey) != null;
                        result = item ? Constants.ReturnTrue : Constants.ReturnFalse;
                    }
                    else
                        result = Constants.ReturnFailure;
                }
                else
                {
                    LogUtils.Log(LogLevel.Error, 
                        nameof(ContainsKey), 
                        "Failed to open a connection to the database.");

                    result = Constants.ReturnFailure;
                }
            } 
            catch (Exception ex) 
            {
                LogUtils.Log(LogLevel.Error, nameof(ContainsKey), ex.Message);
                result = Constants.ReturnFailure;
            }
            return result;
        }


        [Route("${SelectById}/${UniqueId}")] 
        [HttpPost]
        public string SelectById([FromBody] PostBundle bundle) 
        {
            var content = ValidateBundle(bundle);
            if (string.IsNullOrEmpty(content))
                return Constants.ReturnFailure;

            var identifier = StringUtils.ToInt(content, Constants.Undefined);
            if (identifier == Constants.Undefined) 
                return Constants.ReturnFailure;
            
            using var con = new Connection();
            var query = con.DB?.Table<${ClassName}>();

            var item = query?.FirstOrDefault(obj => obj.ServerId == identifier);
            string result = null;
            if (item != null)
                result = ${ClassName}.AsJson64(item);
            return result;
        }

        [Route("${SelectByKey}/${UniqueId}")] 
        [HttpPost]
        public string SelectByKey([FromBody] PostBundle bundle) 
        {
            var content = ValidateBundle(bundle);
            if (string.IsNullOrEmpty(content))
                return Constants.ReturnFailure;

            using var con = new Connection();
            var query = con.DB?.Table<${ClassName}>();

            var item = query?.FirstOrDefault(obj => obj.Key == content);
            string result = null;
            if (item != null)
                result = ${ClassName}.AsJson64(item);
            return result;
        }

        [Route("${Save}/${UniqueId}")] 
        [HttpPost]
        public void Save([FromBody] PostBundle bundle) 
        {
            var content = ValidateBundle(bundle);
            if (string.IsNullOrEmpty(content))
                return;

            var obj = (UnpackedBundle)JsonParser.Unwrap(content, typeof(UnpackedBundle), false);
            if (obj == null)
                return;

            ${ClassName}.Save(new ${ClassName}{
                ServerId = obj.ServerId,
                Revision = obj.Revision,
                Key      = obj.Key,
                Storage  = obj.Package,
            });
        }

        [Route("${Drop}/${UniqueId}")] 
        [HttpPost]
        public void Drop([FromBody] PostBundle bundle) 
        {
            var content = ValidateBundle(bundle);
            if (string.IsNullOrEmpty(content))
                return;

            using var con = new Connection();
            var query = con.DB?.Table<${ClassName}>();

            var item = query?.FirstOrDefault(obj => obj.Key == content);
            if (item != null)
                con.DB?.Delete(item);
        }

        [Route("${Clear}/${UniqueId}")] 
        [HttpPost]
        public void Clear() 
        {
            ${ClassName}.Clear();
        }
    }