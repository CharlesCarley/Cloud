
    public static class Database
    {
        private static string _databasePath;

        public static string Path => _databasePath;

        public static void Register(string pathToDatabaseFile)
        {
            if (string.IsNullOrEmpty(pathToDatabaseFile))
                throw new ArgumentNullException(nameof(pathToDatabaseFile));

            _databasePath = pathToDatabaseFile;

            try
            {
                ${RegisterTypes}
            }
            catch (Exception ex)
            {
                _databasePath = null;
                LogUtils.Log(LogLevel.Error, ex.Message);
            }
        }

        public static void Clear()
        {
            ${ClearTypes}
        }

        public static string GenerateKey()
        {
            return Guid.NewGuid()
                .ToString()
                .ToUpper(CultureInfo.InvariantCulture);
        }
    }


    public class Connection : IDisposable
    {
        public SQLiteConnection DB => _connection;

        private readonly SQLiteConnection _connection;

        public Connection(SQLiteOpenFlags flags = SQLiteOpenFlags.ReadWrite)
        {
            try
            {
                _connection = new SQLiteConnection(Database.Path, flags);
            }
            catch
            {
                LogUtils.Log($"Failed to open the supplied {Database.Path}");
            }
        }

        public void Dispose()
        {
            _connection?.Close();
            _connection?.Dispose();
        }
    }

    ${Content}
