
    public class ${ClassName} : ${InterfaceName} 
    {
        public const int UniqueIdentifier = ${UniqueId};

        [PrimaryKey, AutoIncrement]
        public int Identifier { get; set; } = Constants.Undefined;

        public string Key { get; set; } = string.Empty;

        public int ServerId { get; set;} = Constants.Undefined;

        public int Revision { get; set; } = Constants.Undefined;
        
        public delegate void  BaseHandler(${ClassName} item);

        public delegate void  DefaultHandler();

        public static   event DefaultHandler Cleared;

        public static   event BaseHandler Saved;

        public static   event BaseHandler Dropped;

        public static   event DefaultHandler StateChanged;
        
        
        public static void Register() 
        {
            using (var con = new Connection(SQLiteOpenFlags.ReadWrite | SQLiteOpenFlags.Create))
            {
                con.DB?.CreateTable<${ClassName}>();
            }
        }

        public bool Save() 
        {
            return Save(this);
        }

        public Task<bool> SaveAsync() 
        {
            return Task.Run(() => Save(this));
        }

        public bool Drop() 
        {
            return Drop(this);
        }
        

        public static void Clear() 
        {
            using(var con = new Connection())
            {
                con.DB?.DropTable<${ClassName}>();
                con.DB?.CreateTable<${ClassName}>();

                try 
                {
                    Cleared?.Invoke();
                    StateChanged?.Invoke();
                } 
                catch 
                {
                    // ignored
                }
            }
        }
        
        public static Task ClearAsync()
        {
            return Task.Run(Clear);
        }

        public static List<${ClassName}> SelectAll() 
        {
            List<${ClassName}> val = null;
            using(var con = new Connection())
            {
                var query = con.DB?.Table<${ClassName}>();
                if (query != null)
                    val = query.ToList();
            }
            return val;
        }

        public static ${ClassName} SelectByKey(string key) 
        {
            if (key is null)
                return null;

            ${ClassName} val = null;
            using(var con = new Connection())
            {
                var query = con.DB?.Table<${ClassName}>();
                if (query != null)
                    val = query.FirstOrDefault(i => i.Key == key);
            }
            return val;
        }
        
        public static ${ClassName} SelectByIdentifier(int id) 
        {
            ${ClassName} val = null;
            using(var con = new Connection())
            {
                var query = con.DB?.Table<${ClassName}>();
                if (query != null)
                    val = query.FirstOrDefault(i => i.Identifier == id);
            }
            return val;
        }

        public static bool ExistsByKey(string key) 
        {
            if (key is null)
                return false;

            bool val = false;
            using(var con = new Connection())
            {
                var query = con.DB?.Table<${ClassName}>();
                if (query != null)
                    val = query.Any(i => i.Key == key);
            }
            return val;
        }
        
        public static bool ExistsById(int identifier) 
        {
            bool val = false;            
            using(var con = new Connection())
            {
                var query = con.DB?.Table<${ClassName}>();
                if (query != null)
                    val = query.Any(i => i.Identifier == identifier);
            }
            return val;
        }

        private static void InsertImpl(Connection con, TableQuery<${ClassName}> query, ${ClassName} obj, out bool result)
        {
            if (string.IsNullOrEmpty(obj.Key))
                obj.Key = Database.GenerateKey();

            obj.Revision = 1;

            result = con.DB.Insert(obj) != 0;
            if (result)
            {
                ${ClassName} element = query.FirstOrDefault(i => i.Key == obj.Key);

                if (element.Identifier != Constants.Undefined)
                {
                    // Update the identifier for this instance.
                    obj.Identifier = element.Identifier;
                }
                else
                    throw new Exception("Failed to extract an id from the database.");
            }
            else
            {
                throw new Exception($"Insert object {obj.Key} failed.");
            }
        }

        private static void UpdateImpl(Connection con, TableQuery<${ClassName}> query, ${ClassName} obj, out bool result)
        {
            ${ClassName} element = query.FirstOrDefault(i => i.Key == obj.Key);
            if (element == null)
                throw new Exception($"Failed to extract the object {obj.Key} from the database.");

            if (element.Identifier != Constants.Undefined)
            {

                // Update the identifier for this instance and
                // bump the revision prior to update.
                obj.Identifier = element.Identifier;
                obj.Revision   = obj.Revision + 1;

                result = con.DB.Update(obj) != 0;
            }
            else
            {
                throw new Exception("Failed to extract an id from the database.");
            }
        }

        private static bool SaveOrUpdateImpl(Connection con, TableQuery<${ClassName}> query, ${ClassName} obj)
        {
            bool result;
            if (query.All(i => i.Key != obj.Key))
                InsertImpl(con, query, obj, out result);
            else
                UpdateImpl(con, query, obj, out result);

            if (!result)
                return false;


            try
            {
                Saved?.Invoke(obj);
                StateChanged?.Invoke();
            }
            catch (Exception exception)
            {
                // if the call back code throws an exception
                // just log it and keep going
                LogUtils.Log(LogLevel.Warn, nameof(Save), exception.Message);
            }
            return true;
        }

        public static bool Save(${ClassName} obj)
        {
            if (obj is null)
                return false;

            var result = false;
            using (var con = new Connection())
            {
                try
                {
                    var query = con.DB?.Table<${ClassName}>();
                    if (query != null)
                        result = SaveOrUpdateImpl(con, query, obj);
                }
                catch (Exception exception)
                {
                    result = false;
                    LogUtils.Log(LogLevel.Error, nameof(Save), exception.Message);
                }
            }
            return result;
        }

        public static int Save(List<${ClassName}> objects) 
        {
            if (objects is null)
                return 0;
            return objects.Count(Save);
        }

        public static bool Drop(${ClassName} obj) 
        {
            if (obj is null)
                return false;

            var result = false;
            try 
            {
                using(var con = new Connection())
                {
                    if (con.DB != null)
                    {
                        result = con.DB.Delete(obj) > 0;

                        if (result) 
                        {
                            try 
                            {
                                Dropped?.Invoke(obj);
                                StateChanged?.Invoke();
                            } 
                            catch (Exception exception)
                            {
                                // if the call back code throws an exception
                                // just log it and keep going
                                LogUtils.Log(LogLevel.Warn, nameof(Drop), exception.Message);
                            }
                        }
                    }
                }
            }
            catch (Exception exception) 
            {
                LogUtils.Log(LogLevel.Error, nameof(Drop), exception.Message);
            }
            return result;
        }

        public static int Drop(IEnumerable<${ClassName}> objects) 
        {
            if (objects is null)
                return 0;
            return objects.Count(Drop);
        }
        
        public static bool DropByKey(string key) 
        {
            if (string.IsNullOrEmpty(key))
                return false;

            var obj = SelectByKey(key);
            return !(obj is null) && Drop(obj);
        }
        
        public static bool DropByIdentifier(int identifier) 
        {
            if (identifier <= 0)
                return false;
            var obj = SelectByIdentifier(identifier);
            return !(obj is null) && Drop(obj);
        }

        public JsonObject ToJson()
        {
            var obj = new JsonObject();
            obj.AddValue("Identifier", Identifier);
			obj.AddValue("Key", Key);
			${AddMembersToJObject}
            return obj;
        }

        ${TransactionImpl}
    }

    ${SyncImpl}